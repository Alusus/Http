import "Srl/Memory.alusus";
import "Srl/Array.alusus";
import "libcivetweb.so";

module Http {
    class Context{
        def stopFlag: int; // Should we stop event loop
    };

    def RequestCallback: alias ptr[func (connection: ptr[Connection]): Int];

    class Callbacks{
        /* Called when civetweb has received new HTTP request.
        If the callback returns one, it must process the request
        by sending valid HTTP headers and a body. Civetweb will not do
        any further processing. Otherwise it must return zero.
        Note that since V1.7 the "begin_request" function is called
        before an authorization check. If an authorization check is
        required, use a request_handler instead.
        Return value:
            0: civetweb will process the request itself. In this case,
                the callback must not send any data to the client.
            1-999: callback already processed the request. Civetweb will
                    not send any data after the callback returned. The
                    return code is stored as a HTTP status code for the
                    access log. */
        def beginRequest: RequestCallback;

        /* Called when civetweb has finished processing request. */
        def endRequest: ptr[func (connection: ptr[Connection], replyStatusCode: Int)];

        /* Called when civetweb is about to log a message. If callback returns
        non-zero, civetweb does not log anything. */
        def logMessage: ptr[func (connection: ptr[Connection], message: CharsPtr): Int];

        /* Called when civetweb is about to log access. If callback returns
        non-zero, civetweb does not log anything. */
        def logAccess: ptr[func (connection: ptr[Connection], message: CharsPtr): Int];

        /* Called when civetweb initializes SSL library.
        Parameters:
            userData: parameter user_data passed when starting the server.
        Return value:
            0: civetweb will set up the SSL certificate.
            1: civetweb assumes the callback already set up the certificate.
            -1: initializing ssl fails. */
        def initSsl: ptr[func (sslContext: ptr[Void], userData: ptr[Void]): Int];

        /* Called when civetweb is closing a connection.  The per-context mutex is
        locked when this is invoked.  This is primarily useful for noting when
        a websocket is closing and removing it from any application-maintained
        list of clients.
        Using this callback for websocket connections is deprecated: Use
        mg_set_websocket_handler instead. */
        def connectionClose: ptr[func (connection: ptr[Connection]): Void];

        /* Called when civetweb tries to open a file. Used to intercept file open
        calls, and serve file data from memory instead.
        Parameters:
            path:     Full path to the file to open.
            dataLen: Placeholder for the file size, if file is served from
                        memory.
        Return value:
            NULL: do not serve file from memory, proceed with normal file open.
            non-NULL: pointer to the file contents in memory. data_len must be
            initilized with the size of the memory block. */
        def openFile: ptr[func (connection: ptr[Connection],
                                path: CharsPtr,
                                dataLen: ptr): Char];

        /* Called when civetweb is about to serve Lua server page, if
        Lua support is enabled.
        Parameters:
            luaContext: "lua_State *" pointer. */
        def initLua: ptr[func (connection: ptr[Connection], luaContext: ptr[Void]): Void];

        /* Called when civetweb is about to send HTTP error to the client.
        Implementing this callback allows to create custom error pages.
        Parameters:
            status: HTTP error status code.
        Return value:
            1: run civetweb error handler.
            0: callback already handled the error. */
        def httpError: ptr[func (connection: ptr[Connection], status: Int): Int];

        /* Called after civetweb context has been created, before requests
        are processed.
        Parameters:
            context: context handle */
        def initContext: ptr[func (context: ptr[Context]): Void];

        /* Called when a new worker thread is initialized.
        Parameters:
            context: context handle
            threadType:
            0 indicates the master thread
            1 indicates a worker thread handling client connections
            2 indicates an internal helper thread (timer thread)
            */
        def initThread: ptr[func (context: ptr[Context], threadType: Int): Void];

        /* Called when civetweb context is deleted.
        Parameters:
            context: context handle */
        def exitContext: ptr[func (context: ptr[Context]): Void];
    };

    class RequestInfo {
        def requestMethod: CharsPtr;     // "GET", "POST", etc
        def requestUri: CharsPtr;        // URL-decoded URI (absolute or relative, as in the request)
        def localUri: CharsPtr;          // URL-decoded URI (relative). Can be NULL if the request_uri does not address
                                         // a resource at the server host.
        def uri: CharsPtr;               // Deprecated: use local_uri instead
        def httpVersion: CharsPtr;       // E.g. "1.0", "1.1"
        def queryString: CharsPtr;       // URL part after '?', not including '?', or NULL
        def remoteUser: CharsPtr;        // Authenticated user, or NULL if no auth used
        def remoteAddr: array[Char, 48]; // Client's IP address as a string.

        def contentLength: Int[64];      // Length (in bytes) of the request body, can be -1 if no length was given.
        def remotePort: Int;             // Client's port
        def isSsl: Int;                  // 1 if SSL-ed, 0 if not
        def userData: ptr[Void];         // User data pointer passed to mg_start()
        def connData: ptr[Void];         // Connection-specific user data

        def numberHeaders: Int;          // Number of HTTP headers

        def httpHeaders: array[Header, 64]; // Maximum 64 headers
    };

    class Header {
        def name: CharsPtr;  // HTTP header name
        def value: CharsPtr; // HTTP header valuue
    };

    class Connection {
        def requestInfo: ptr[RequestInfo];
        def context: ptr[Context];
        def ssl: ptr;                   // SSL descriptor
        def clientSslContext: ptr;      // SSL context for client connections
        def client: ptr;                // Connected client
        def connectionBirthTime: Int;   // Time (wall clock) when connection was established
        def requestTime: Int;           // Time (since system start) when the request was received
        def numberBytesSent: int[64];   // Total bytes sent to client
        def contentLen: int[64];        // Content-Length header value
        def consumedContent: int[64];   // How many bytes of content have been read
        def isChunked: int;             // Transfer-Encoding is chunked: 0=no, 1=yes: data available, 2: all data read
        def chunkRemainder: word[64];   // Unread data from the last chunk
        def buf: CharsPtr;              // Buffer for received data
        def pathInfo: CharsPtr;         // PATH_INFO part of the URL

        def mustClose: int;             // 1 if connection must be closed
        def inErrorHandler: int;        // 1 if in handler for user defined error pages
        def internalError: int;         // 1 if an error occured while processing the request

        def bufSize: int;               // Buffer size
        def requestLen: int;            // Size of the request + headers in a buffer
        def dataLen: int;               // Total size of data in a buffer
        def statusCode: int;            // HTTP reply status code, e.g. 200
        def throttle: int;              // Throttling, bytes/sec. <= 0 means no throttle
        def lastThrottleTime: int;      // Last time throttled data was sent
        def lastThrottleBytes: int[64]; // Bytes sent this second
        def mutex: int[64];             // Used by mg_(un)lock_connection to ensure atomic transmissions for websockets
    };

    @expname[mg_start]
    func _mg_start(callbacks: ptr[Callbacks], user_data: Int, options: ptr[CharsPtr]): ptr[Context];

    @expname[mg_stop]
    func closeServer(context: ptr[Context]): Void;

    // read data from client
    @expname[mg_read]
    func read(connection: ptr[Connection], buffer: ptr, bufferSize: Int): Int;

    // send data to client
    @expname[mg_write]
    func write(connection: ptr[Connection], buffer: CharsPtr, bufferSize: Int): Int;

    // work like write(), but allows to do message formatting
    @expname[mg_printf]
    func print(connection: ptr[Connection], format: CharsPtr, ...any): Int;

    @expname[mg_send_file]
    func sendFile(connection: ptr[Connection], fileName: CharsPtr): Void;

    @expname[mg_send_mime_file]
    func sendFile(connection: ptr[Connection], filename: CharsPtr, mime: CharsPtr): Void;

    @expname[mg_get_cookie]
    func getCookie(
        cookiesString: CharsPtr, cookieName: CharsPtr, outCookieContent: CharsPtr, outCookieSize: Word[64]
    ): Int;

    @expname[mg_get_header]
    func getHeader(connection: ptr[Connection], headerName: CharsPtr): CharsPtr;

    @expname[mg_get_request_info]
    func getRequestInfo(connection: ptr[Connection]): ptr[RequestInfo];

    @expname[mg_get_var]
    func getVariable(
        data: CharsPtr, dataSize: Int, variableName: CharsPtr, outVariable: CharsPtr, outVariableSize: Int
    ): Int;

    func createServer (callback: RequestCallback, options: ref[Srl.Array[CharsPtr]]): ptr[Context] {
        def callbacks: Callbacks;
        Srl.Memory.set(callbacks~ptr, 0, Callbacks~size);
        callbacks.beginRequest = callback;

        return _mg_start(callbacks~ptr, 0, options.buf~ptr);
    }

    func createServer (callback: RequestCallback, optsCount: Int, opts: ...CharsPtr): ptr[Context] {
        def options: Srl.Array[CharsPtr];
        while optsCount-- > 0 options.add(opts~next_arg[CharsPtr]);
        options.add(0);

        return createServer(callback, options);
    }

    func createServer(callback: RequestCallback, port: CharsPtr): ptr[Context] {
        return createServer(callback, { "listening_ports", port });
    }
};

